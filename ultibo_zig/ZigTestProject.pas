program ZigTestProject;

{$mode objfpc}{$H+}

{ Zig Test Project (Based on API Project Template)                           }
{                                                                              }
{  The project simply calls a "main" function in the C/C++ project and passes  }
{  all command line arguments to it. The main function can then do anything it }
{  requires by calling Ultibo API functions, standard C library funtions or    }
{  other libraries.                                                            }
{                                                                              }
{  Note that you can call your main function anything you like except main.    }
{  Free Pascal has an internal alias of MAIN that refers to the begin/end      }
{  section of the project file below (also known as PASCALMAIN).               }
{                                                                              }
{  You are also not limited to just calling a single main function from the    }
{  Free Pascal project, you can include other Free Pascal functionality such   }
{  as creating additional threads and including optional units. You can also   }
{  call directly to multiple functions within your C/C++ project from multiple }
{  threads which can be created here or created inside you C/C++ project.      }
{                                                                              }
{  To compile the project use the template Makefile from the command line.     }
{                                                                              }
{  Once compiled copy the kernel7.img file to an SD card along with the        }
{  firmware files and use it to boot your Raspberry Pi.                        }

{Include the standard Ultibo units}
uses
   RaspberryPi2,    {Include RaspberryPi2 if nothing else was defined (eg Building from Lazarus)}
 GlobalTypes,
 Platform,
 Threads,
 Syscalls,         {Include the Syscalls unit for standard C library support}
 //API in '..\..\interface\API.pas',              {Include the API unit to export the Ultibo API} //To Do //Temporary
 API,
 UltiboUtils,
 Logging,
 GlobalConfig,
         Shell,
     ShellFilesystem,
     ShellUpdate,
     RemoteShell,
    uTFTP,
 Winsock2,
   Console,

 GlobalConst,

 SysUtils;

{Link our C/C++ object files by including the autogenerated include file}
//{$INCLUDE __link.inc}
{$l zigmain.o}

{Import the main function of the project so we can call it from Ultibo}
function zigmain(argc: int; argv: PPChar): int; cdecl; external name 'zigmain';





{Variables to hold argc and argv to pass to our C/C++ project}
var
 argc:int;
 argv:PPChar;
 //ExitCode:Integer;
 ff:string;
 Handle:THandle;
 Handle1:THandle;
 IPAddress : string;
function WaitForIPComplete : string;

var

  TCP : TWinsock2TCPClient;

begin

  TCP := TWinsock2TCPClient.Create;

  Result := TCP.LocalAddress;

  if (Result = '') or (Result = '0.0.0.0') or (Result = '255.255.255.255') then

    begin

      while (Result = '') or (Result = '0.0.0.0') or (Result = '255.255.255.255') do

        begin

          sleep (1500);

          Result := TCP.LocalAddress;

        end;

    end;

  TCP.Free;

end;

procedure WaitForSDDrive;

begin

  while not DirectoryExists ('C:\') do sleep (500);

end;

procedure Msg (Sender : TObject; s : string);

begin

  ConsoleWindowWriteLn (Handle1, s);

end;
begin

 {Allocate the command line arguments}
 argv:=AllocateCommandLine(SystemGetCommandLine,argc);

 {Call the "main" function of our C/C++ project}
 //StartLogging;
 //ExitCode := zigmain(argc,argv);
 //LoggingOutput(Format('zigmain stopped with exit code %d',[ExitCode]));
     LoggingDeviceSetTarget(LoggingDeviceFindByType(LOGGING_TYPE_FILE),'c:\ultibologging.log');
 LoggingDeviceSetDefault(LoggingDeviceFindByType(LOGGING_TYPE_FILE));
   Handle:=ConsoleWindowCreate(ConsoleDeviceGetDefault,CONSOLE_POSITION_TOPLEFT,True);
 Handle1:=ConsoleWindowCreate(ConsoleDeviceGetDefault,CONSOLE_POSITION_TOPRIGHT,True);
 ConsoleWindowWriteLn (Handle1, 'TFTP Demo.');
  ConsoleWindowWriteLn (Handle1, 'Local Address ' + IPAddress);
 SetOnMsg (@Msg);
 ConsoleWindowWriteLn(Handle, TimeToStr(Time));

 {Release the command line}
 ReleaseCommandLine(argv);

 {Halt the main thread if we return}
 ThreadHalt(0);

end.

